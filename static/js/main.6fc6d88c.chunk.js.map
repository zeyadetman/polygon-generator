{"version":3,"sources":["components/Polygon/index.tsx","utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Polygon","props","sides","length","colors","childs","points","x","0","y","Array","from","_","index","i","Number","Math","cos","PI","toFixed","sin","str","getPoints","id","width","height","viewBox","fill","polygons","scaleNumber","push","style","transform","reverse","renderChilds","App","hash","useState","text","setText","inputAsHash","sha256","mainColor","split","filter","color","Color","alpha","lighten","map","hex","toString","getColors","childsCount","max","a","isNaN","sidesCount","getSidesCount","className","onChange","e","target","value","placeholder","marginBottom","fontSize","border","outline","onClick","saveSvgAsPng","document","getElementById","scale","left","LENGTH","top","backgroundColor","marginTop","cursor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6fc6d88c.chunk.js","sourcesContent":["import React, { ReactElement } from \"react\";\nimport { getPoints } from \"../../utils\";\n\ninterface IPolygon {\n  sides: number;\n  length: number;\n  colors: string[];\n  childs: number;\n}\n\nfunction Polygon(props: IPolygon) {\n  const { sides, length, colors, childs } = props;\n  const points = getPoints(sides, length);\n\n  const renderChilds = (): ReactElement[] => {\n    if (childs) {\n      const polygons: ReactElement[] = [];\n      Array.from({ length: childs }, (_, index): ReactElement[] => {\n        const scaleNumber = ((1 / (childs + 1)) * (index + 1)).toFixed(2);\n        polygons.push(\n          <polygon\n            key={index}\n            points={points}\n            fill={colors[index + 1]}\n            style={{\n              transform: `scale(${scaleNumber})`,\n            }}\n          />\n        );\n\n        return polygons;\n      });\n\n      return polygons.reverse();\n    }\n\n    return [];\n  };\n\n  return (\n    <svg\n      id=\"polygonResult\"\n      width={length * 2}\n      height={length * 2}\n      viewBox={`${length * -1} ${length * -1} ${length * 2} ${length * 2}`}\n    >\n      <polygon points={points} fill={colors[0]} />\n      {renderChilds()}\n    </svg>\n  );\n}\n\nexport default Polygon;\n","import Color from 'color';\nconst getPoints = (sides: number, length: number): string => {\n  const x: { [key: number]: number } = { 0: length };\n  const y: { [key: number]: number } = { 0: 0 };\n\n  Array.from({length: sides}, (_, index) => {\n    const i = index + 1;\n    x[i] = Number((length * Math.cos((2 * Math.PI * i) / sides)).toFixed(0));\n    y[i] = Number((length * Math.sin((2 * Math.PI * i) / sides)).toFixed(0));\n    return { x: x[i], y: y[i] };\n  })\n\n  let str = \"\";\n  Array.from({ length: sides + 1 }, (_, index) => {\n    return (str += `${x[index]},${y[index]} `);\n  });\n\n  return str;\n};\n\nconst getColors = (hash: string, text: string): string[] => {\n  const mainColor = `#${hash\n    .split(/(?<=^(?:.{3})+)(?!$)/)\n    .filter((color: string) => color.length === 3)[0]}`;\n  const colors = Array.from({ length: 10 }, (_, index) => {\n    return Color(mainColor).alpha(0.1*index*text.length).lighten(0.1*index)\n  });\n\n  //@ts-ignore\n  return colors.map((color: string) => color.hex().toString());\n};\n\nconst getChildsCount = (hash: string): number => {\n  return Math.max(\n    2,\n    hash.split(\"\").filter((a: string) => isNaN(Number(a))).length % 22\n  );\n};\n\nconst getSidesCount = (hash: string): number => {\n  return Math.max(\n    3,\n    hash\n      .split(\"\")\n      .filter((a: string) => !isNaN(Number(a)) && Number(a) % 8 === 0).length\n  );\n};\n\nexport { getPoints, getColors, getChildsCount, getSidesCount };\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Polygon from \"./components/Polygon\";\nimport sha256 from \"sha256\";\nimport { getChildsCount, getColors, getSidesCount } from \"./utils\";\nimport { saveSvgAsPng } from \"save-svg-as-png\";\n\nconst LENGTH = 160;\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const inputAsHash = sha256(text);\n  const colors = getColors(inputAsHash, text);\n  const childsCount = getChildsCount(inputAsHash);\n  const sidesCount = getSidesCount(inputAsHash);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <textarea\n          onChange={(e) => setText(e.target.value)}\n          placeholder=\"Write text and get your own polygon...\"\n          style={{\n            marginBottom: \"6rem\",\n            fontSize: \"1em\",\n            width: \"40%\",\n            color: \"#111\",\n            border: \"none\",\n            outline: \"none\",\n          }}\n        />\n        <Polygon\n          childs={childsCount}\n          sides={sidesCount}\n          length={LENGTH}\n          colors={colors}\n        />\n\n        <button\n          onClick={() => {\n            saveSvgAsPng(\n              document.getElementById(\"polygonResult\"),\n              `polygon-${text}.png`,\n              {\n                scale: 1,\n                left: LENGTH * -1,\n                top: LENGTH * -1,\n              }\n            );\n          }}\n          style={{\n            backgroundColor: \"#eee\",\n            border: \"none\",\n            marginTop: \"2rem\",\n            cursor: \"pointer\",\n          }}\n        >\n          Save the polygon\n        </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}